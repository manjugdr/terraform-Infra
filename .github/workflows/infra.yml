name: Terraform Deployment with Modules

on:
  workflow_dispatch:  # Allows manual triggering of the workflow with inputs
    inputs:
      environment:  # Input to select the environment
        description: "Select the environment: dev, staging, or production"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - production
      action:  # Input to select the Terraform operation
        description: "Select the Terraform action: plan, apply, or destroy"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
      module:  # Input to select the module to deploy
        description: "Select the module: ec2, ecr, eks, rds, security_group, or vpc"
        required: true
        default: "vpc"
        type: choice
        options:
          - ec2
          - ecr
          - eks
          - rds
          - security_group
          - vpc

jobs:
  terraform:
    name: Deploy Terraform Module
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Initialize Terraform for the selected module
        working-directory: modules/${{ github.event.inputs.module }}
        run: terraform init -backend-config="../../environments/${{ github.event.inputs.environment }}/backend.tfvars"

      - name: Terraform Action
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          case ${{ github.event.inputs.action }} in
            plan)
              terraform plan -var-file="../../environments/${{ github.event.inputs.environment }}/terraform.tfvars"
              ;;
            apply)
              terraform apply -auto-approve -var-file="../../environments/${{ github.event.inputs.environment }}/terraform.tfvars"
              ;;
            destroy)
              terraform destroy -auto-approve -var-file="../../environments/${{ github.event.inputs.environment }}/terraform.tfvars"
              ;;
            *)
              echo "Invalid action: ${{ github.event.inputs.action }}"
              exit 1
              ;;
          esac
